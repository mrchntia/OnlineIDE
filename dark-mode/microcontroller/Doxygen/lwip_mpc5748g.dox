/*!
    @page lwip_mpc5748g_group lwIP TCP/IP stack
    @brief Basic application that presents the lwIP usage with S32 SDK

    ## Application description ##
    _____
    The purpose of this demo is to provide the user with an out-of-the box
    example application for MPC5748G platform, using S32 SDK.
    The demo uses lwIP stack and supports more scenarios, which can be enabled
    or disabled by modifying the \b lwipcfg.h file located in \b Sources\.

    Basic functionality can be checked by pinging the board from the host PC:
        ping 192.168.0.200

    Please note that a prior setting of the IP on your PC might be needed. On Windows, this can be done from:

    <b>Control Panel</b> > <b>Network and Internet</b> > <b>Network Connections</b> > <b>Local Area Connection</b>

    Select <b>Internet Protocol Version 4</b> and click <b>Properties</b>; select <b>Use the following IP address</b> and configure the IP address and subnet mask.
    Configuration example: IP - 192.168.0.10, subnet mask - 255.255.255.0.

    The demo provides an SSL echo server. In order to run the SSL echo application, CPU MPC5748G must be flashed with HSM firmware in advance. Check the documentation of HSM to see how to flash it.
    A host-side utility like <b>openssl</b> can be used to connect to the server, e.g.:

        openssl s_client -connect 192.168.0.200:11111 -certform DER -cert <CERT_PATH>/client-cert.der -keyform DER -key <CERT_PATH>/client-key.der -CAfile <CERT_PATH>/ca-cert.pem

    where CERT_PATH is the path to example certificates available in <SDK>\middleware\tcpip\wolfssl\certs\1024.

    @note SSL_ECHO application does not work with Debug_RAM configuration.

    In order to build with Debug_RAM configuration, you need to configure:
    - Disable SSL_ECHO application:
       + tcpip component -> Applications -> uncheck "SSL_ECHO" and uncheck "Secure Sockets Layer (wolfSSL)"
    - Reduce heap memory
       + FreeRTOS component -> Memory -> Total heap size: 49152

    ## Prerequisites ##
    _____
    To run the example you will need to have the following items:
    - 1 MPC5748G board
    - 1 Ethernet cable
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PEmicro Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - DEVKIT-MPC5748G Rev.D

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lwip_mpc5748g. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lwip_mpc5748g). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b lwip_mpc5748g_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b lwip_mpc5748g_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.
    #### 5. Expected results ####

    A similar output should be displayed, if the connection to the SSL echo server was established:

        CONNECTED(00000148)
        [...]
        SSL-Session:
            Protocol  : TLSv1.2
            Cipher    : AES128-SHA
            [...]
            Verify return code: 0 (ok)

    The Secure Sockets demo application includes a benchmark for measuring the hardware-accelerated encryption and decryption speeds.
    Sending ‘benchmark’ message over the secure socket connection triggers the benchmark and returns a message with the results:

    <i>Encryption speed: 8957 +/-67 KB/s <br>
    Decryption speed: 8989 +/-108 KB/s</i>

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/

