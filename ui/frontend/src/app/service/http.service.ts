import {Injectable} from "@angular/core";
import {HttpClient} from "@angular/common/http";
import {Observable} from "rxjs";
import {Project} from "../project"
import {SourceFile} from "../sourceFile";
import {CompilationResult} from "../compilationResult";
import {SourceCode} from "../sourceCode";

const allProjectsUrl = '/project/';
const createProjectUrl = '/project/create-project';
const deleteProjectUrl = '/project/delete-project';
const allSourceFilesOfProjectUrl = '/project/read-project';
const updateProjectNameUrl = '/project/update-project-name';

const allSourceFilesUrl = '/project/all-source-files';
const createSourceFileUrl = '/project/create-source-file';
const deleteSourceFileUrl = '/project/delete-source-file';
const updateSourceFileNameUrl = '/project/update-source-file-name';
const updateSourceFileCodeUrl = '/project/update-source-file-code';

const shareProjectUrl = '/project/share-project';


const compileUrl = '/compiler/compile';

const darkModeStatusUrl = '/darkmode/dark-mode';

/*
  Service for interacting with the backend REST API.
  To use it inside a component, pass an HttpService object as an argument to the component's constructor.
 */
@Injectable({
  providedIn: 'root'
})
export class HttpService {
  constructor(private http: HttpClient) {}

  getAllProjects(): Observable<Project[]> {
    return this.http.get<Project[]>(allProjectsUrl);
  }

  createProject(newProjectName: string): Observable<Project> {
    let newProject = new Project();
    newProject.name = newProjectName;
    // project id is generated by the Project Service, no need to set it
    return this.http.post<Project>(createProjectUrl, newProject);
  }

  deleteProject(projectId: string): Observable<void> {
    return this.http.delete<void>(deleteProjectUrl + '/' + projectId);
  }

  getAllSourceFilesOfProject(projectId: string): Observable<SourceFile[]> {
    return this.http.get<SourceFile[]>(allSourceFilesOfProjectUrl + '/' + projectId);
  }

  updateProjectName(projectId: string, newProjectName: string): Observable<Project> {
    return this.http.post<Project>(updateProjectNameUrl + '/' + projectId, newProjectName);
  }

  getAllSourceFiles(): Observable<SourceFile[]> {
    return this.http.get<SourceFile[]>(allSourceFilesUrl);
  }

  createSourceFile(newSourceFileName: string, sourceFileParentProject: Project): Observable<SourceFile> {
    let newSourceFile = new SourceFile();
    newSourceFile.name = newSourceFileName;
    newSourceFile.project = sourceFileParentProject;
    return this.http.post<SourceFile>(createSourceFileUrl, newSourceFile);
  }

  deleteSourceFile(sourceFileId: string): Observable<void> {
    return this.http.delete<void>(deleteSourceFileUrl + '/' + sourceFileId);
  }

  updateSourceFileName(sourceFileId: string, newSourceFileName: string): Observable<SourceFile> {
    return this.http.post<SourceFile>(updateSourceFileNameUrl + '/' + sourceFileId, newSourceFileName);
  }

  updateSourceFileCode(sourceFileId: string, newSourceCode: string): Observable<SourceFile> {
    return this.http.post<SourceFile>(updateSourceFileCodeUrl + '/' + sourceFileId, newSourceCode);
  }

  compile(sourceCode: SourceCode): Observable<CompilationResult> {
    return this.http.post<CompilationResult>(compileUrl, sourceCode);
  }

  getIsCurrentlyDark(): Observable<boolean> {
    return this.http.get<boolean>(darkModeStatusUrl);
  }

  /*shareProject(sourceFileId: string, User: string): Observable<SourceFile> {
     return this.http.post<SourceFile>(shareProjectUrl + '/' + sourceFileId, User);
  }*/

  //this is wrong but compilable, obviously sourceFileId or a projectId is needed as parameter in the Url and the user in the body --> something like above
  shareProject(projectId: string, User: string): Observable<Project> {
    return this.http.post<Project>(shareProjectUrl + '/' + projectId, User);
  }


}
